[{"/Users/ringo/Documents/capstone/storybreak_front_end/src/App.js":"1","/Users/ringo/Documents/capstone/storybreak_front_end/src/components/WritingDesk.js":"2","/Users/ringo/Documents/capstone/storybreak_front_end/src/components/Corkboard.js":"3","/Users/ringo/Documents/capstone/storybreak_front_end/src/reportWebVitals.js":"4","/Users/ringo/Documents/capstone/storybreak_front_end/src/components/IndexCard.js":"5","/Users/ringo/Documents/capstone/storybreak_front_end/src/index.js":"6"},{"size":1264,"mtime":1612292198542,"results":"7","hashOfConfig":"8"},{"size":2142,"mtime":1612300967192,"results":"9","hashOfConfig":"8"},{"size":5808,"mtime":1612325265074,"results":"10","hashOfConfig":"8"},{"size":362,"mtime":1611969184469,"results":"11","hashOfConfig":"8"},{"size":552,"mtime":1612323845299,"results":"12","hashOfConfig":"8"},{"size":500,"mtime":1611969184468,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1syrwap",{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ringo/Documents/capstone/storybreak_front_end/src/App.js",[],"/Users/ringo/Documents/capstone/storybreak_front_end/src/components/WritingDesk.js",["27","28"],"/Users/ringo/Documents/capstone/storybreak_front_end/src/components/Corkboard.js",["29"],"import React, {useState, useEffect} from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nimport IndexCard from './IndexCard';\nimport './Corkboard.css';\n\n\nconst placeholderCards = [\n    {\n        id: 1,\n        logline: 'it was a dark and stormy night',\n        location: 0,\n    },\n    {\n        id: 2,\n        logline: 'there was a boy named Eustace Clarence Scrubb, and he almost deserved it',\n        location: 1,\n    },\n    {\n        id: 3,\n        logline: 'it was love at first sight',\n        location: 2\n    },\n    {\n        id: 4,\n        logline: 'it is a truth universally acknowledged, that a single man in possession of a good fortune, must be in want of a wife',\n        location: 3\n    }\n]\n\nconst Corkboard = () => {\n    const [cards, setCards] = useState(placeholderCards);\n    const [showModal, setShowModal] = useState(false);\n    const [currentCard, setCurrentCard] = useState({\n        id: null,\n        logline: '',\n        location: null,\n    });\n\n    const popOutCard = (card) => {\n        const selectedCard = {\n            id: card.id,\n            logline: card.logline,\n            location: card.location,\n        }\n        setCurrentCard(selectedCard);\n        setShowModal(true);\n    }\n    \n    const closeModal = () => {\n        setShowModal(false);\n        setCurrentCard({\n            id: null,\n            logline: null,\n            location: null,\n        })\n    }\n\n    const cardComponents = cards.map((card, i) => {\n        return (\n            <IndexCard logline={card.logline} key={card.id} id={card.id} showCard={popOutCard} location={card.location} />\n        )\n    });\n\n    // TODO refactor to connect with backend\n    const addCard = () => {\n        const expandedCards = [...cards];\n        const newCard = {\n            id: cards.length + 1,\n            logline: '',\n            location: cards.length\n        }\n        expandedCards.push(newCard);\n        setCards(expandedCards);\n\n        popOutCard(newCard);\n    };\n\n    const changeCardSummary = (event) => {\n        const updatedCard = {\n            id: currentCard.id,\n            logline: event.target.value,\n            location: currentCard.location,\n        };\n\n        setCurrentCard(updatedCard);\n    };\n\n    // TODO - refactor to send changes to back end\n    const saveCardChanges = () => {\n        const updatedCards = [];\n        \n        cards.forEach((card) => {\n            if (card.id === currentCard.id) {\n                updatedCards.push(currentCard);\n            } else {\n                updatedCards.push(card);\n            }\n        });\n\n        setCards(updatedCards);\n        closeModal();\n    };\n\n    // TODO refactor to send changes to back end\n    const deleteCard = () => {\n        const trimmedCards = [];\n\n        cards.forEach((card) => {\n            if (card.id !== currentCard.id) {\n                trimmedCards.push(card);\n            }\n        });\n\n        setCards(trimmedCards);\n        closeModal();\n    }\n\n    const moveCard = (mod) => {\n        if ((currentCard.location + mod >= cards.length) || (currentCard.location + mod < 0)) {\n            closeModal();\n            return;\n        }\n        \n        const shuffleCards = cards;\n\n        shuffleCards.splice(currentCard.location, 1)\n        shuffleCards.splice(currentCard.location + mod, 0, currentCard)\n\n        const updateLocations = shuffleCards.map((card, index) => {\n            const updateCard = {...card};\n            updateCard.location = index;\n            return updateCard;\n        });\n        setCards(updateLocations);\n\n        const movedCard = {...currentCard};\n        movedCard.location = currentCard.location + mod;\n        setCurrentCard(movedCard);\n    }\n\n    return (\n        <div className=\"corkboard__wall\">\n            <div className=\"corkboard__frame rounded p-5 d-flex justify-content-center align-items-center\">\n                <div className=\"corkboard__board d-flex flex-wrap justify-content-center p-2\">{cardComponents}</div>\n            </div>\n\n            <div className=\"corkboard__button-bar d-flex justify-content-center\">\n                <button onClick={addCard} className=\"btn btn-medium btn-primary\">Add New Card</button>\n            </div>\n\n            <Modal \n                show={showModal}\n                onHide={closeModal}\n                animation={false}\n                backdrop='static'\n                centered={true}\n            >    \n                <Modal.Body>\n                    <Form>\n                        <Form.Group>\n                            <Form.Label>Scene Summary</Form.Label>\n                            <Form.Control\n                                as='textarea'\n                                value={currentCard.logline}\n                                onChange={changeCardSummary}\n                            />\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n            \n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={closeModal}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={saveCardChanges}>\n                        Save Changes\n                    </Button>\n                    {currentCard.location === 0 ? null : <Button variant=\"info\" onClick={() => moveCard(-1)}>Move Scene Earlier</Button>}\n                    {currentCard.location === cards.length - 1 ? null : <Button variant=\"info\" onClick={() => moveCard(1)}>Move Scene Later</Button>}\n                    <Button variant=\"danger\" onClick={deleteCard}>\n                        Delete Scene\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    )\n};\n\nexport default Corkboard;","/Users/ringo/Documents/capstone/storybreak_front_end/src/reportWebVitals.js",[],"/Users/ringo/Documents/capstone/storybreak_front_end/src/components/IndexCard.js",[],"/Users/ringo/Documents/capstone/storybreak_front_end/src/index.js",[],{"ruleId":"30","severity":1,"message":"31","line":1,"column":26,"nodeType":"32","messageId":"33","endLine":1,"endColumn":35},{"ruleId":"30","severity":1,"message":"34","line":2,"column":60,"nodeType":"32","messageId":"33","endLine":2,"endColumn":68},{"ruleId":"30","severity":1,"message":"31","line":1,"column":26,"nodeType":"32","messageId":"33","endLine":1,"endColumn":35},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Modifier' is defined but never used."]